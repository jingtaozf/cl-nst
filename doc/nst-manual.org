#+LaTeX_HEADER: \parindent 0pt \parskip 0.5em
#+TITLE: NST 4.1 User Manual
#+AUTHOR:
#+OPTIONS: skip:nil toc:1
#+LaTeX: \vspace*{5mm}

#+LaTeX: \noindent
This document is the manual and users' guide to the 4.1.$x$ series of
the NST test framework, last updated for 4.1.0.  NST is a unit test
system for Common Lisp which provides support for test fixture data,
stateful setup and cleanup of tests, grouping of tests, and (we
think!) a useful runtime interface.  Suggestions and comments are
welcome.  The files in the NST distribution's =self-test=
directory, especially =self-test/core/builtin-checks.lisp=,
holds the NST tests for NST and contain many examples (some of which
we have adapted for this manual).  Known bugs and infelicities,
platform-specific release notes, and other technical materials are
available via the link on NST's CLiki page, =cliki.net/NST=.

*Contributors.* The primary author of both NST and this manual is John
Maraist (Smart Information Flow Technologies, 211 North First Street,
Suite 300, Minneapolis, MN 55401; =jmaraist= at =sift.info=).  Robert
P. Goldman provided guidance, comments and suggestions through the
development.  Other contributors include Michael J.S. Pelican,
Steven A. Harp, Michael Atighetchi and Patrick Stein.

* Fixtures
#+INCLUDE: "./gen/def-fixtures.org"
#+INCLUDE: "./gen/with-fixtures.org"
* Test groups
#+INCLUDE: "./gen/def-test-group.org"
* Testing values
#+INCLUDE: "./gen/def-test.org"
** Basic criteria
   #+INCLUDE: "./gen/true__criterion.org"
   #+INCLUDE: "./gen/eq__criterion.org"
   #+INCLUDE: "./gen/symbol__criterion.org"
   #+INCLUDE: "./gen/eql__criterion.org"
   #+INCLUDE: "./gen/equal__criterion.org"
   #+INCLUDE: "./gen/equalp__criterion.org"
   #+INCLUDE: "./gen/forms-eq__criterion.org"
   #+INCLUDE: "./gen/forms-eql__criterion.org"
   #+INCLUDE: "./gen/forms-equal__criterion.org"
   #+INCLUDE: "./gen/predicate__criterion.org"
   #+INCLUDE: "./gen/err__criterion.org"
   #+INCLUDE: "./gen/perf__criterion.org"
** Compound criteria
   #+INCLUDE: "./gen/not__criterion.org"
   #+INCLUDE: "./gen/all__criterion.org"
   #+INCLUDE: "./gen/any__criterion.org"
   #+INCLUDE: "./gen/apply__criterion.org"
   #+INCLUDE: "./gen/check-err__criterion.org"
   #+INCLUDE: "./gen/progn__criterion.org"
   #+INCLUDE: "./gen/proj__criterion.org"
   #+INCLUDE: "./gen/with-common-criterion__criterion.org"
   #+INCLUDE: "./gen/applying-common-criterion__criterion.org"
** Criteria for multiple values
   #+INCLUDE: "./gen/values__criterion.org"
   #+INCLUDE: "./gen/value-list__criterion.org"
   #+INCLUDE: "./gen/drop-values__criterion.org"
** Criteria for lists
   #+INCLUDE: "./gen/seq__criterion.org"
   #+INCLUDE: "./gen/each__criterion.org"
   #+INCLUDE: "./gen/permute__criterion.org"
   #+INCLUDE: "./gen/alist__criterion.org"
** Criteria for vectors
   #+INCLUDE: "./gen/across__criterion.org"
** Criteria for classes
   #+INCLUDE: "./gen/slots__criterion.org"
** Programmatic and debugging criteria
   #+INCLUDE: "./gen/pass__criterion.org"
   #+INCLUDE: "./gen/warn__criterion.org"
   #+INCLUDE: "./gen/info__criterion.org"
* Testing processes
The test criteria of the previous section all examined the result of
evaluating the forms under test.  This section presents NST's criteria
for validating the /process/ of a computation, specifying assertions
which should hold at the initial, intermediate and final points of the
process.
#+INCLUDE: "./gen/eval__criterion.org"
** Defining tests
#+INCLUDE: "./gen/def-eval-test.org"

** Asserting properties
#+INCLUDE: "./gen/assert-non-nil.org"
#+INCLUDE: "./gen/assert-not-eq.org"
#+INCLUDE: "./gen/assert-not-equalp.org"
#+INCLUDE: "./gen/assert-null.org"
#+INCLUDE: "./gen/assert-criterion.org"
#+INCLUDE: "./gen/assert-equal.org"
#+INCLUDE: "./gen/assert-zero.org"
#+INCLUDE: "./gen/assert-equalp.org"
#+INCLUDE: "./gen/assert-not-equal.org"
#+INCLUDE: "./gen/assert-eq.org"
#+INCLUDE: "./gen/assert-eql.org"
#+INCLUDE: "./gen/assert-not-eql.org"

** Defining new assertion functions
#+INCLUDE: "./gen/def-unary-predicate-assert.org"
#+INCLUDE: "./gen/def-binary-predicate-assert.org"
#+INCLUDE: "./gen/def-unary-negated-predicate-assert.org"
#+INCLUDE: "./gen/def-binary-negated-predicate-assert.org"

** A simpler process checker
#+INCLUDE: "./gen/process__criterion.org"

* Testing invariants against sampled data
The =sample= criterion provides random generation of data for
validating program properties.  Our approach is based on Claessen and
Hughes's Quickcheck (Koen Claessen and John Hughes, ``QuickCheck: a
lightweight tool for random testing of Haskell programs,'' from
/Proceedings of the International Conference on Functional
Programming/, 2000.  QuickCheck papers, code and other resources are
available at [[http://www.cs.chalmers.se/~rjmh/QuickCheck][www.cs.chalmers.se/~rjmh/QuickCheck]]).

This style of testing is somewhat more complicated than specific tests
on single, bespoke forms.  There are two distinct efforts, which we
address in the next two sections: describing how the sample data is to
be generated, and specifying the test itself.

** Generating sample data
Data generation is centered around the generic function =arbitrary=.
#+INCLUDE: "./gen/arbitrary.org"

NST provides methods of /arbitrary/ for many standard Lisp types.
Non-scalar types are associated with additional keyword arguments for
constraints on value generation.
- Standard numeric types =number=, =real=, =rational=, =integer=,
  =float=, =fixnum=, =bignum=, =ratio=, =short-float=, =single-float=,
  =double-float=, =long-float=, =complex=.

  These standard numeric types are not associated with additional
  keyword arguments.
  #+begin_example
  (nst:arbitrary t)
  (nst:arbitrary 'complex)
  (nst:arbitrary 'integer)
  (nst:arbitrary 'ratio)
  (nst:arbitrary 'single-float)
  #+end_example

  Note that =short-float=, =single-float=, =double-float= are not
  available on Allegro Lisp.

- Types =character= and =string=:
  - Argument =noncontrol=.  Excludes the control characters associated
    with ASCII code 0 through 31.
  - Argument =range=.  Allows the range of characters to be restricted
    to a particular subset:
    |--------------+-------------------|
    | Value        | Meaning           |
    |--------------+-------------------|
    | =:standard=  | Codes up to 96    |
    | =:ascii=     | Codes through 127 |
    | =:ascii-ext= | Codes through 255 |
    |--------------+-------------------|
    Omitted or with any other value, characters with any code up to
    =char-code-limit= can result.  Examples:
    #+begin_example
(nst:arbitrary 'character)
(nst:arbitrary '(character :noncontrol t
                           :range :standard))
    #+end_example
- Type =symbol=.
  - Argument =existing=. If non-nil, requires that the result be a
    previously-interned symbol.
  - Argument =exported=. Requires that the result be not only a
    previously-interned symbol, but also one exported by its package.
    Ignored if =existing= is explicitly set to nil.
  - Argument =package=. Specifies the package from which the symbol
    will be generated.  If omitted, a package is selected at random
    from the existing ones.
  - Argument =nonnull=. If non-nil, allows =arbitrary= to ignore other
    restriction to guarantee returning a non-nil symbol.  When null,
    =arbitrary= may return nil.
  - Argument =gensym=. If non-nil, and if =arbitrary= is explicitly
    set to nil, returns a new uninterned symbol.

- Type =scalar=.  The common supertype of the above numeric types,
  =character=, =string= and =symbol=.  This specifier is not
  associated with additional keyword arguments.

- Type =cons=.
  - Arguments =car= and =cdr= should be additional type
    specifications, used direct the generation of respectively the left
    and right elements of the result.  Each defaults to =t=.

- Type =list= and
  =vector=.
  - Argument =length= specifies the length of the structure. If
    omitted, will be randomly generated.
  - Argument =elem= directs the generation of the container's
    elements.  For both, the default element type is =t=.

- Type =array=.
  - Argument =elem=. As for =list= and =vector=.
  - Argument =dimens=.  Should be a list of nonnegative integers
    specifying the length of each dimension of the array.  If omitted,
    will be randomly generated.
  - Argument =rank=. Specifies the number of dimensions. If omitted
    but =dimens= is given, will be set to the length of =dimens=.  If
    both =rank= and =dimens= are omitted, then both are randomly
    generated.

- Type =hash-table=.
  - Argument =size=. Specifies the number of entries in the table.  If
    omitted, will be randomly generated.
  - Argument =test=. Specifies the hash table's test function.  If
    omitted, will be randomly selected from =eq=, =eql=, =equal= and
    =equalp=.
  - Arguments =key= and =val= direct the generation of the table's
    keys and values, respectively.  For the keys, the default element
    type is =t= when the test function is texttt{eq} or =eql=, and
    =scalar= otherwise.  For the values, the default element type is
    =t=.

- Type =t=.  The common supertype of all Lisp types.  This specifier
  is not associated with additional keyword arguments.

Beyond those standard Lisp types, NST provides the type =scalar= as a
supertype of the numeric types plus character, =string= and
=symbol=. Users may extend this definition to include
additional type specifications, as we discuss below.  Types are not
associated with =scalar= are referred to as =compound=
(although there is no corresponding type specification).  To avoid
generating structures too large to hold in memory, NST provides the
global variable =*max-compound-structure-depth*= and the macro
=compound-structure=.

#+INCLUDE: "./gen/_max-compound-structure-depth_.org"
#+INCLUDE: "./gen/compound-structure.org"
#+INCLUDE: "./gen/def-arbitrary-instance-type.org"

** Invariants as tests

* Defining test criteria
The criteria used in test forms decide whether, when and how to use
the forms under test and the forms and subcriteria provided to each
test criterion.  Criteria receive their arguments as forms, and may
examine them with or without evaluation, as the particular criterion
requires.  NST provides two mechanisms for defining new criteria, and
a number of support functions for use within these definitions.  The
simpler, but more limited, way to define a new criterion is by
specifying how it should be rewritten to another criterion.  The
=def-criterion-alias= macro provides this mechanism, which we discuss
in Section \ref{def-criterion-alias-section}.  The =def-criterion=
macro provides the more general mechanism for criteria definition,
where Lisp code produces a result report from the forms under test and
criterion's forms and subcriteria.  We discuss =def-criterion= in
Section \ref{def-criterion-section}.  We discuss the NST API for
creating these result reports in Section
\ref{criteria-forms-report-section}, and for recursive processing of
subcriteria in Section \ref{subcriteria-section}.

** Aliases over criteria
#+LaTeX: \label{def-criterion-alias-section}
#+INCLUDE: "./gen/def-criterion-alias.org"

** Reporting forms
#+LaTeX: \label{def-criterion-section}
NST provides functions both for building test reports, and for adding
information to a report.
#+INCLUDE: "./gen/make-success-report.org"
#+INCLUDE: "./gen/make-failure-report.org"
#+INCLUDE: "./gen/make-warning-report.org"
#+INCLUDE: "./gen/make-error-report.org"
#+INCLUDE: "./gen/add-error.org"
#+INCLUDE: "./gen/add-failure.org"
#+INCLUDE: "./gen/add-info.org"
#+INCLUDE: "./gen/add-warning.org"
#+INCLUDE: "./gen/wrap-thrown-lisp-warning.org"

** Processing subcriteria
#+LaTeX: \label{criteria-forms-report-section}
The criterion itself can contain /subcriteria/ which can be
incorporated into the main criterion's assessment.  NST provides two
functions which trigger testing by a subcriterion, each returning the
check's result report.

#+INCLUDE: "./gen/check-criterion-on-value.org"
#+INCLUDE: "./gen/check-criterion-on-form.org"

** General criteria definitions
#+LaTeX: \label{subcriteria-section}
#+INCLUDE: "./gen/def-criterion.org"

* The runtime system
The runtime system provides several operations for scheduling and
running tests, and debugging failing and erring tests.
#+INCLUDE: "./gen/nst-cmd.org"
Calling =nst= or =nst-cmd= without a command argument repeats the last
test-executing command.
For the sake of brevity we use the =:nst= shorthand below.

#+INCLUDE: "./gen/help__cmd.org"
There are a number of commands for running tests, but most of the time
only one will be needed:
#+INCLUDE: "./gen/run__cmd.org"
#+INCLUDE: "./gen/run-package__cmd.org"
#+INCLUDE: "./gen/run-group__cmd.org"
#+INCLUDE: "./gen/run-test__cmd.org"
One further command for running a test is useful when writing and
debugging the tests themselves:
#+INCLUDE: "./gen/apply__cmd.org"


- The =apply= criterion first evaluates the forms under test, applying
  =FUNCTION= to them.  The overall criterion passes or fails exactly
  when the subordinate =CRITERION= with the application's multiple
  result values.
  #+begin_example
  (:apply FUNCTION CRITERION)
  #+end_example
  Example:
  #+begin_example
  (def-test applycheck (:apply cadr (:eql 10)) '(0 10 20))
  #+end_example

There are two commands for (re)printing the results of tests:
#+INCLUDE: "./gen/report__cmd.org"
#+INCLUDE: "./gen/detail__cmd.org"

# The =undef=  and =clear=  commands allow removal of groups, tests and results.
# INCLUDE: "./gen/undef__cmd.org"
# INCLUDE: "./gen/clear__cmd.org"

The =set= and =unset= display and adjust NST's configuration.
#+INCLUDE: "./gen/set__cmd.org"
There are currently three properties which can be manipulated by =set=
and =unset=:
#+INCLUDE: "./gen/verbose__switch.org"
#+INCLUDE: "./gen/debug-on-error__switch.org"
#+INCLUDE: "./gen/debug-on-fail__switch.org"
#+INCLUDE: "./gen/unset__cmd.org"

#+INCLUDE: "./gen/backtraces__switch.org"

  This property is only available on platform which allow programmatic
  examination of backtraces, which is not standardized in Common Lisp;
  currently we have implemented this feature on Allegro only.This
  property has a complicated default setting.  Firstly, if the symbol
  ='common-lisp-user::*nst-generate-backtraces*= is bound when NST
  loads, NST will use its value as the initial value for this
  property.  Otherwise by default, on MacOS systems the property
  initializes to =nil= because of a known error on that system, but
  this setting can be overriden by the property
  =:nst-unsafe-allegro-backtraces=.  Finally, if none of these issues
  apply, the initial value is ==.

The above NST commands are governed by a number of global
variables. In general, interactive use of NST should not require
direct access to these variables, but when automating NST operations
may require changing, or creating a new dynamic scope for, their
settings.

#+INCLUDE: "./gen/_debug-on-error_.org"
#+INCLUDE: "./gen/_debug-on-fail_.org"
#+INCLUDE: "./gen/_default-report-verbosity_.org"
#+INCLUDE: "./gen/_nst-output-stream_.org"

#+INCLUDE: "./gen/open__cmd.org"

Example:
#+begin_example
CL-USER(75): (nst:def-fixtures small-fixture ()
                (fix-var1 3)
                (fix-var2 'asdfg))
NIL
CL-USER(76): (boundp 'fix-var1)
NIL
CL-USER(77): :nst :open small-fixture
Opened fixture SMALL-FIXTURE.
CL-USER(78): fix-var1
3
CL-USER(79):
#+end_example
Fixtures can be opened into a different package than where they were
first defined, but these bindings are in addition to the bindings in
the original package, and are made by a symbol import to the
additional package.

* Integration with ASDF
NST's integration with ASDF is a work in progress.  This section
described the current integration, the ways we expect it to change,
and a less-flexible and lower-level, but likely more stable,
alternative integration technique.

** NST's ASDF systems
From version 1.2.2, the system =:asdf-nst= provides two classes
for ASDF system definitions, =asdf:nst-test-runner= and
=asdf:nst-test-holder=.

Up to NST 1.2.1 =:asdf-nst= provided a single class
=asdf:nst-testable=, and in the future we plan to reunify the
current two classes into a single class again.  However our first
implementation required NST to be loaded even when a system was
/not/ being tested, because we had no way to distinguish the
source code associated with testing from production code.  We plan to
solve this problem with a new file type =nst-file= in a future
version of NST.  This file type /not/ be compiled or loaded
for the =compile-op= or =load-op= of the system, only
for its =test-op=.

*** Test-running systems
ASDF systems of the =asdf:nst-test-runner= class do not
themselves contain NST declarations in their source code, but may
identify other systems which do, and which should be tested as a part
of testing the given system.  These systems also allow local
definitions of NST's configuration for the execution of their tests.

Specify that a system runs NST tests by providing =:class
  asdf:nst-test-runner= argument to =asdf:defsystem=.  Use the
=:nst-systems= argument to name the systems which house the
actual unit tests:

- =:nst-systems (system system ... system)=

  Specifies a list of other systems
  which should be tested when testing this system.  These other
  systems /not/ otherwise need to be identified as a
  dependency of this system (nor, for that matter, does =:nst=
  itself); they will be loaded upon =test-op= if they are not
  yet present.

Another optional argument to an =nst-test-runner= system
definition is:

- =:nst-init (arg-list ... arg-list)=

  Initializing arguments to NST, to be executed after this system is
  loaded.  Each =arg-list= is passed as the arguments as if to
  a call to the =nst-cmd= macro.

- =:nst-debug-config form=

  NST debugging customization for this system.  The =FORM= Should be
  an expression which, when evaluated, returns a list of keyword
  arguments; note that to give the list itself, it must be explicitly
  quoted, /which is a change of behavior from pre-1.2.2 versions/.

- =:nst-debug-protect (symbol ... symbol)= \par
  Gives a list of variables whose values should be saved before
  applying any configuration changes from =:nst-debug-config=,
  and restored after testing.

- =:nst-push-debug-config t-or-nil=

  If non-nil, then when this system is loaded its =:nst-debug= and
  =:nst-debug-protect= settings will be used as NST's defaults.

*** Test-containing systems
The =asdf:nst-test-holder= class is a subclass of
=nst-test-runner= for systems which are not only tested via
NST, but also contains NST tests in their source code.

Specify that a system defines NST tests by providing =:class
  asdf:nst-test-holder= to =asdf:defsystem=.  The arguments for
=asdf:nst-test-runner= may be used for
=asdf:nst-test-holder=, as well as the following:

- =:nst-packages (package package ... package)=

  When the system is tested, all
  groups and tests in the named packages should be run.

- =:nst-groups ((package group) ... (package group))=

  When the system is tested, tests in the named groups should be run.
  Naming the package separately from the group and test in this
  argument (and in the similar arguments below) allows the group to be
  named before its package is necessarily defined.

- =:nst-tests ((package group test) ... (package group test))=

  When the system is tested, all the named
  tests should be run.

The next three arguments to an =nst-testable= system are mutually
exclusive, and moreover exclude any of the above group or
=:nst-systems=:

- =:nst-package package=

  When the system is
  tested, all groups and tests in the named package should be run.

- =:nst-group (package group)=

  When the system is tested, all tests in the named group should be
  run.

- =:nst-test (package group test)=

  When the system is tested, the given test should be run.
Examples of =nst-testable= ASDF system definitions:
#+begin_example
;; NST and its ASDF interface must be loaded
;; before we can process the defsystem form.
(asdf:oos 'asdf:load-op :asdf-nst)
#+LaTeX:
(defsystem :mnst
    :class nst-test-holder
    :description "The NST test suite's self-test."
    :serial t
    :nst-systems (:masdfnst)
    :nst-groups ((:mnst-simple . g1)
                 (:mnst-simple . g1a)
                 (:mnst-simple . g1a1)
                 (:mnst-simple . core-checks))
    :depends-on (:nst)
    :in-order-to ((test-op (load-op :mnst)))
    :components ((:module "core"
                  :components ((:file "byhand")
                               (:file "builtin-checks")))))
#+end_example

** An alternate ASDF integration technique
We plan to deprecate and then remove =asdf:nst-test-holder= and
=nst-test-runner= once we have implemented a unified
replacement for them.  To avoid the possibility of a bit-rotted test
scheme, the link between a system and its unit tests can be made
explicit by providing methods for ASDF generic functions which make
calls to the NST API.  Specifically:

- A method of the ASDF =asdf:perform= generic function
  specialized to the =asdf:test-op= operation and the system in
  question will be executed to test a system.  So an appropriate
  method definition would begin:
  #+begin_example
  (defmethod asdf:perform ((op asdf:test-op)
                           (sys (eql (asdf:find-system
                                        :SYSTEM-NAME))))
  #+end_example

- NST API functions for running tests are:

  - =nst:run-package=

  - =nst:run-group=

  - =nst:run-test=

- The main NST API function for printing the results of testing is
  =asdf:report-multiple=\,.  In situations where only a single
  package, group or test is associated with a system, one of the
  following function may be more convenient:

  - =nst:report-package=

  - =nst:report-group=

  - =nst:report-test=

When providing an explicit =asdf:perform= method, it is also necessary
to explicitly list system dependencies to NST and to the other systems
which contain the tested system's unit test definitions.

#+LaTeX: \appendix \addtocontents{toc}{\setcounter{tocdepth}{1}}
#+LaTeX: \label{output-contents}


# * The NST API
# ** Primary macros
# =def-criterion= --- \S\ref{def-criterion:primary}, p. \pageref{def-criterion:primary}.
#
# =def-criterion-alias= --- \S\ref{def-criterion-alias:primary}, p. \pageref{def-criterion-alias:primary}.
#
# =def-fixtures= --- \S\ref{def-fixtures:primary}, p. \pageref{def-fixtures:primary}.
#
# =def-test= --- \S\ref{def-test:primary}, p. \pageref{def-test:primary}.
#
# =def-test-group= --- \S\ref{def-test-group:primary}, p. \pageref{def-test-group:primary}.
#
# ** Functions used in criteria definitions
# =add-error= --- \S\ref{add-error:primary}, p. \pageref{add-error:primary}.
#
# =add-failure= --- \S\ref{add-failure:primary}, p. \pageref{add-failure:primary}.
#
# =add-info= --- \S\ref{add-info:primary}, p. \pageref{add-info:primary}.
#
# =add-warning= --- \S\ref{add-warning:primary}, p. \pageref{add-warning:primary}.
#
# =check-criterion-on-form= --- \S\ref{check-criterion-on-form:primary}, p. \pageref{check-criterion-on-form:primary}.
#
# =check-criterion-on-value= --- \S\ref{check-criterion-on-value:primary}, p. \pageref{check-criterion-on-value:primary}.
#
# =make-error-report= --- \S\ref{make-error-report:primary}, p. \pageref{make-error-report:primary}.
#
# =make-failure-report= --- \S\ref{make-failure-report:primary}, p. \pageref{make-failure-report:primary}.
#
# =make-success-report= --- \S\ref{make-success-report:primary}, p. \pageref{make-success-report:primary}.
#
# =make-warning-report= --- \S\ref{make-warning-report:primary}, p. \pageref{make-warning-report:primary}.
#
# ** Programmatic control of testing and output
# =*debug-on-error*= --- \S\ref{*debug-on-error*:primary}, p. \pageref{*debug-on-error*:primary}.
#
# =*debug-on-fail*= --- \S\ref{*debug-on-fail*:primary}, p. \pageref{*debug-on-fail*:primary}.
#
# =*default-report-verbosity*= --- \S\ref{*default-report-verbosity*:primary}, p. \pageref{*default-report-verbosity*:primary}.
#
# =*nst-output-stream*= --- \S\ref{*nst-output-stream*:primary}, p. \pageref{*nst-output-stream*:primary}.
#
# =junit-results-by-group= --- \S\ref{junit-results-by-group:primary}, p. \pageref{junit-results-by-group:primary}.
#
# =nst-cmd= --- \S\ref{nst-cmd:primary}, p. \pageref{nst-cmd:primary}.
#
# =nst-junit-dump= --- \S\ref{nst-junit-dump:primary}, p. \pageref{nst-junit-dump:primary}.
#
# ** Testing randomized samples
# =*max-compound-structure-depth*= --- \S\ref{*max-compound-structure-depth*:primary}, p. \pageref{*max-compound-structure-depth*:primary}.
#
# =arbitrary= --- \S\ref{arbitrary:primary}, p. \pageref{arbitrary:primary}.
#
# =compound-structure= --- \S\ref{compound-structure:primary}, p. \pageref{compound-structure:primary}.
#
# =def-arbitrary-instance-type= --- \S\ref{def-arbitrary-instance-type:primary}, p. \pageref{def-arbitrary-instance-type:primary}.
#
# ** Method-based tests on objects
# =def-test-generic= --- \S\ref{def-test-generic:primary}, p. \pageref{def-test-generic:primary}.
#
# =def-test-method= --- \S\ref{def-test-method:primary}, p. \pageref{def-test-method:primary}.
#
# =def-test-method-criterion= --- \S\ref{def-test-method-criterion:primary}, p. \pageref{def-test-method-criterion:primary}.
#
# =nst-results= --- \S\ref{nst-results:primary}, p. \pageref{nst-results:primary}.
#
# ** Other symbols
# =with-fixtures= --- \S\ref{with-fixtures:primary}, p. \pageref{with-fixtures:primary}.
#
# ** Deprecated macros, functions and variable
# =def-criterion-unevaluated= --- \S\ref{def-criterion-unevaluated:primary}, p. \pageref{def-criterion-unevaluated:primary}.
#
# =def-form-criterion= --- \S\ref{def-form-criterion:primary}, p. \pageref{def-form-criterion:primary}.
#
# =def-values-criterion= --- \S\ref{def-values-criterion:primary}, p. \pageref{def-values-criterion:primary}.
#
# =emit-failure= --- \S\ref{emit-failure:primary}, p. \pageref{emit-failure:primary}.
#
# =emit-success= --- \S\ref{emit-success:primary}, p. \pageref{emit-success:primary}.
#
# =emit-warning= --- \S\ref{emit-warning:primary}, p. \pageref{emit-warning:primary}.
#
#
#
# ** Output to JUnit
# NST reports can be formatted as XML for use with JUnit, although the
# API for this feature is underdeveloped.
#
# The =junit-results-by-group= function writes the NST test results in
# JUnit XML format, organized by group, aligning test groups with Java
# classes, and individual tests with =@Test= methods.
# #+begin_example
# (junit-results-by-group [ :verbose flag ]
#                         [ :dir directory ]
#                         [ :file filespec ]
#                         [ :stream stream ]
#                         [ :if-dir-does-not-exist bool ]
#                         [ :if-file-exists bool ])
# #+end_example
# Either =:dir= and =:file= options, or the =:stream= option, but not
# both, should be used to specify the target for XML output; if none of
# the three options are given, the function will write to
# =*standard-output*=.
#
# Function =nst-junit-dump= pushes the entire NST state to a JUnit XML
# file whose stream is specified by its argument.

* Inheritance-based test methods
/This feature is in-progress. It currently does not work under
Lispworks or Clisp, and details of the API may change in subsequent
versions./

For testing objects in a class hierarchy NST offers xUnit-style test
methods dispatching on different classes.  The idea is that an object
should have all relevant tests applied to it without requiring that
the tests be explicitly enumerated in the test definition: all tests
applicable to an object's class, or to any of its superclasses, should
be discovered and run.

Our running examples of this section are tests on objects of these
four classes:
#+begin_example
(defclass top-cls ()
     ((tc1 :initarg :tc1 :reader tc1)
      (tc2 :initarg :tc2 :reader tc2)))

(defclass mid-cls (top-cls)
     ((mc1 :initarg :mc1 :reader mc1)
      (mc2 :initarg :mc2 :reader mc2)))

(defclass side-cls ()
     ((sc1 :initarg :sc1 :reader sc1)
      (sc2 :initarg :sc2 :reader sc2)))

(defclass bot-cls (mid-cls side-cls)
     ((bc1 :initarg :bc1 :reader bc1)
      (bc2 :initarg :bc2 :reader bc2)))
#+end_example


** Declaring methods
There are two macros which define a particular method of a generic
test function.

The =def-test-method-criterion= macro provides a simple facility for
defining a generic test function method in terms of an NST criterion.
#+begin_example
(def-test-method-criterion function-name class-name
  criterion)
#+end_example
- function-name :: The name of the test function for which we are
     defining a method.
- class-name :: The class for which we are defining a method.
- criterion :: The criterion to be applied to members of the class.
For example:
#+begin_example
(nst:def-test-method-criterion for-clses top-cls
      (:predicate (lambda (tc) (< (tc1 tc) (tc2 tc)))))
#+end_example

The =def-test-generic= declares a generic test function.
#+begin_example
  (def-test-generic function-name)
#+end_example
For example,
#+begin_example
(nst:def-test-generic for-clses)
#+end_example

The =def-test-method= defines a general method for a generic test
function.
#+begin_example
  (def-test-method function-name
                   ( test-value class-name )
    form
    ...
    form)
#+end_example
- function-name :: The name of the test function for which we are defining a method.
- test-value :: Formal parameter to which the value under test will be bound.
- class-name :: The class for which we are defining a method.
The method body should return a test result report, constructed with
=make-success-result=, etc.For example:
#+begin_example
(nst:def-test-method for-clses (o mid-cls)
  (with-slots (mc1 mc2) o
    (cond
      ((< mc1 mc2) (make-success-report))
      (t (make-failure-report :format "~d not < ~d" :args (list mc1 mc2))))))
(nst:def-test-method for-clses (o side-cls)
  (with-slots (sc1 sc2) o
    (cond
      ((eql sc1 sc2) (make-success-report))
      (t (make-failure-report :format "~d not eql ~d" :args (list sc1 sc2))))))
#+end_example

** Invoking methods
   #+INCLUDE: "./gen/methods__criterion.org"
** Method combinations
NST defines a method combination =nst-results= as the default method
combination for functions defined by =def-test-generic=.  This
combination runs /all/ applicable methods, and combines all of their
results into a single NST result record.

This default can be overridden by specifying =t= as the method
combination in the intial declaration.
#+begin_example
(nst:def-test-generic overridden
    (:method-combination t))
(nst:def-test-method-criterion overridden mid-cls
  (:slots (mc1 (:eql 0))
          (mc2 (:eql 2))))
(nst:def-test-method-criterion overridden bot-cls
  (:slots (sc1 (:eql 1))
          (sc2 (:eql 1))))
#+end_example

* Deprecated forms
The macros, functions and variables documented in this section are all
deprecated.  Some continue to be exported from the NST API; others
have already been removed.  This section describes how code using
these forms should be ported to the active NST API.

** Older criteria-defining macros
#+INCLUDE: "./gen/def-criterion-unevaluated.org"
#+INCLUDE: "./gen/def-values-criterion.org"
#+INCLUDE: "./gen/def-form-criterion.org"

** Old test result generators
#+INCLUDE: "./gen/emit-failure.org"
#+INCLUDE: "./gen/emit-success.org"
#+INCLUDE: "./gen/emit-warning.org"
